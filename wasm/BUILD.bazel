# Bazel build

load("//bazel:ray.bzl", "COPTS")

cc_library(
    name = "wasm_engine",
    deps = select({
        "@bazel_tools//src/conditions:darwin": [
            "@wasmtime_c_api_macos//:wasmtime_c_api",
        ],
        "@bazel_tools//src/conditions:windows": [
            #TODO: Add the dependencies on windows.
        ],
        "//conditions:default": [
            "@wasmtime_c_api_linux//:wasmtime_c_api",
        ],
    }),
)

cc_library(
    name = "wasm_engine_static",
    deps = select({
        "@bazel_tools//src/conditions:darwin": [
            "@wasmtime_c_api_macos//:wasmtime_c_api_static",
        ],
        "@bazel_tools//src/conditions:windows": [
            #TODO: Add the dependencies on windows.
        ],
        "//conditions:default": [
            "@wasmtime_c_api_linux//:wasmtime_c_api_static",
        ],
    }),
    linkstatic = 1,
)

filegroup(
    name = "wasm_engine_libs",
    srcs = select({
        "@bazel_tools//src/conditions:darwin": [
            "@wasmtime_c_api_macos//:libwasmtime.so",
        ],
        "@bazel_tools//src/conditions:windows": [
            #TODO: Add the dependencies on windows.
        ],
        "//conditions:default": [
            "@wasmtime_c_api_linux//:libwasmtime.so",
        ],
    }),
)

cc_binary(
    name = "libray_wasm_api.so",
    copts = COPTS,
    linkopts = select({
        "@bazel_tools//src/conditions:darwin": [
            #TODO(larry): Hide the symbols when we make it work on mac.
        ],
        "@bazel_tools//src/conditions:windows": [
            #TODO(larry): Hide the symbols when we make it work on Windows.
        ],
        "//conditions:default": [
            "-Wl,--version-script,$(location :symbols/ray_api_exported_symbols_linux.lds)",
        ],
    }),
    linkshared = 1,
    linkstatic = 1,
    visibility = ["//visibility:public"],
    deps = [
        ":ray_wasm_api",
        ":symbols/ray_api_exported_symbols_linux.lds",
        ":symbols/ray_api_exported_symbols_mac.lds",
    ],
)

cc_library(
    name = "ray_wasm_api",
    srcs = glob([
        "src/ray/api.cc",
        "src/ray/api/*.cc",
        "src/ray/api/*.h",
        "src/ray/app/*.cc",
        "src/ray/app/*.h",
        "src/ray/runtime/*.cc",
        "src/ray/runtime/*.h",
        "src/ray/runtime/**/*.cc",
        "src/ray/runtime/**/*.h",
        "src/ray/runtime/task/*.cc",
        "src/ray/runtime/task/*.h",
        "src/ray/util/*.cc",
        "src/ray/util/*.h",
        "src/ray/*.cc",
        "src/ray/*.h",
        "src/engine/*.cc",
    ]),
    hdrs = glob([
        "include/ray/*.h",
        "include/ray/**/*.h",
        "include/ray/**/**/*.h",
        "include/engine/**/*.hh",
        "include/engine/*.h",
        "include/engine/**/*.h",
    ]),
    copts = COPTS,
    linkopts = ["-ldl"],
    linkstatic = True,
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    deps = [
        "//:core_worker_lib",
        "//:global_state_accessor_lib",
        "//:ray_common",
        "//:ray_util",
        "@boost//:callable_traits",
        "@boost//:dll",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@msgpack",
        "@nlohmann_json",
        "wasm_engine_static", # "wasm_engine" for dynamic linking.
    ],
    alwayslink = True,
)

cc_library(
    name = "ray_wasm_lib",
    srcs = [
        "libray_wasm_api.so",
    ],
    hdrs = glob([
        "include/ray/*.h",
        "include/ray/**/*.h",
        "include/ray/**/**/*.h",
    ]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "wasm_worker",
    srcs = glob(["src/ray/worker/wasm_worker.cc"]),
    copts = COPTS,
    linkstatic = True,
    deps = select({
        "@bazel_tools//src/conditions:windows": [
            # TODO: Add Windows support.
            "//wasm:ray_wasm_api",
        ],
        "//conditions:default": [
            # TODO: Add Linux support.
            "ray_wasm_lib",
            "@boost//:callable_traits",
            "@boost//:optional",
            "@msgpack",
            "@nlohmann_json",
        ],
    })
)

# cc_binary(
#     name = "raywa",
#     srcs = glob([
#         "src/cmd/**/*.cc",
#         "include/cmd/**/*.h",
#         "include/cmd/**/*.hpp",
#     ]),
#     includes = ["include"],
#     linkstatic = True,
#     deps = [
#         "ray_wasm_api",
#     ],
# )

cc_binary(
    name = "raywa",
    srcs = glob([
        "src/cmd/**/*.cc",
        "include/**/*.h",
        "include/**/*.hpp",
    ]),
    includes = ["include"],
    copts = COPTS,
    linkstatic = True,
    deps = select({
        "@bazel_tools//src/conditions:windows": [
            # TODO: Add Windows support.
            "//wasm:ray_wasm_api",
        ],
        "//conditions:default": [
            # TODO: Add Linux support.
            "ray_wasm_lib",
            "@boost//:callable_traits",
            "@boost//:optional",
            "@msgpack",
            "@nlohmann_json",
        ],
    })
)


genrule(
    name = "ray_wasm_pkg",
    srcs = [
        "wasm_worker",
        "ray_wasm_api",
        "libray_wasm_api.so",
        "wasm_engine_libs",
        "raywa",
    ],
    outs = ["ray_wasm_pkg.out"],
    cmd = """
        WORK_DIR="$$(pwd)" &&
        PY_WASM_DIR="$$WORK_DIR/python/ray/wasm" &&
        rm -rf $$PY_WASM_DIR &&
        BOOST_DIR="$$PY_WASM_DIR/include/boost/" &&
        mkdir -p "$$BOOST_DIR" &&
        mkdir -p "$$PY_WASM_DIR/lib/wasmtime" &&
        cp -f $(location raywa) "$$PY_WASM_DIR/" &&
        cp -f $(location wasm_worker) "$$PY_WASM_DIR/" &&
        cp -f -r $$WORK_DIR/external/msgpack/include/* "$$PY_WASM_DIR/include" &&
        cp -f -r $$WORK_DIR/external/nlohmann_json/single_include/* "$$PY_WASM_DIR/include" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/archive" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/assert" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/bind" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/callable_traits" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/concept" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/config" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/container" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/container_hash" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/core" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/detail" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/dll" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/exception" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/filesystem" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/functional" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/io" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/iterator" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/lexical_cast" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/move" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/mpl" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/optional" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/parameter" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/preprocessor" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/system" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/type_traits" "$$BOOST_DIR" &&
        cp -f -r "$$WORK_DIR/external/boost/boost/utility" "$$BOOST_DIR" &&
        cp -f -r $$WORK_DIR/external/boost/boost/*.hpp "$$BOOST_DIR" &&
        cp -f $(locations libray_wasm_api.so) "$$PY_WASM_DIR/lib/" &&
        cp -f $(locations wasm_engine_libs) "$$PY_WASM_DIR/lib/wasmtime" &&
        cp -f -r "$$WORK_DIR/wasm/include/ray" "$$PY_WASM_DIR/include" &&
        THIRDPARTY_DIR="$$WORK_DIR/wasm/example/thirdparty" &&
        rm -rf $$THIRDPARTY_DIR &&
        mkdir $$THIRDPARTY_DIR &&
        cp -f -r "$$PY_WASM_DIR/include" $$THIRDPARTY_DIR &&
        cp -f -r "$$PY_WASM_DIR/lib" $$THIRDPARTY_DIR &&
        cp -f -r "$$WORK_DIR/wasm/example" "$$PY_WASM_DIR" &&
        echo "$$WORK_DIR" > $@
    """,
    local = 1,
    visibility = ["//visibility:public"],
)
